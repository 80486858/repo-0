@import 'common/variables';
@import 'common/mixins';

$border-radius: $av-border-radius-2 + $av-border-width-md;

@include b(button) {
  font-weight: $av-font-weight-bold;
  font-size: $av-font-size-xs;
  line-height: $av-line-height-s;
  box-sizing: border-box;
  display: inline-block;
  vertical-align: middle;
  height: 32px;
  max-width: 100%;
  padding: 0 7px;
  border: $av-border-sm;
  border-radius: $av-border-radius-2;
  cursor: pointer;
  position: relative;

  @include utils-user-select(none);

  @include e(content) {
    display: flex;
    justify-content: center;
    align-items: center;
    height: 100%;
  }

  @include e(icon) {
    font-size: 0;
    margin-right: 8px;
    display: inline-block;
  }

  @include e(text) {
    @include utils-ellipsis;

    display: inline-block;
  }

  @include m(primary) {
    @include button-variant(
      $color: var(--av-inversed-primary),
      $background-color: var(--av-fixed-button),
      $border-color: var(--av-fixed-button),
      $hover-background: var(--el-primary-hover),
      $active-background: var(--el-primary-active),
      $focus-background: var(--av-fixed-button),
      $disabled-background: $av-fixed-button-light,
      $disabled-border: color-mix(in srgb, $av-fixed-button-light 0%, $av-inversed-primary),
      $disabled-color: $av-inversed-primary
    );
  }

  @include m(success) {
    // success button has the same colors across all themes
    @import './common/variables/colors-sass';

    @include button-variant(
      $color: $av-fixed-white,
      $background-color: $av-fixed-success,
      $border-color: $av-fixed-success,
      $disabled-color: $av-inversed-primary,
    );
  }

  @include m(danger) {
    // danger button has the same colors across all themes
    @import './common/variables/colors-sass'; /* stylelint-disable-line no-duplicate-at-import-rules */

    @include button-variant(
      $color: $av-inversed-primary,
      $background-color: $av-fixed-danger,
      $border-color: $av-fixed-danger,
      $disabled-background: $av-fixed-danger-light,
      $disabled-color: $av-inversed-primary,
      $disabled-border: color-mix(in srgb, $av-fixed-danger-light 100%, $av-inversed-primary),
    );
  }

  @include m(secondary) {
    @include button-variant(
      $color: $av-fixed-button,
      $background-color: transparent,
      $border-color: $av-fixed-button,
      $hover-background: var(--el-secondary-hover),
      $active-background: var(--el-secondary-active),
      $focus-background: transparent,
      $disabled-border: color-mix(in srgb, $av-fixed-button-light 100%, $av-inversed-primary),
    );

    outline: none;
  }

  @include m(promo) {
    // promo button has the same colors across all themes
    @import './common/variables/colors-sass'; /* stylelint-disable-line no-duplicate-at-import-rules */

    @include button-variant(
      $color: var(--av-inversed-primary),
      $background-color: $av-fixed-nav-accent,
      $border-color: $av-fixed-nav-accent,
      $disabled-color: var(--av-fixed-button),
    );
  }

  @include m(translucent) {
    @include button-variant(
      $color: var(--el-translucent-text),
      $background-color: var(--el-translucent),
      $border-color: transparent,
      $hover-background: var(--el-translucent-hover),
      $active-background: var(--el-translucent-active),
      $disabled-color: var(--el-translucent-text)
    );

    outline: none;

    &.is-inverse {
      background: var(--el-translucent-inverse);

      &:not(:disabled):hover {
        background: var(--el-translucent-inverse-hover);
      }

      &:not(:disabled).is-selected {
        background-color: var(--el-translucent-inverse-hover);
      }

      &:not(:disabled):active,
      &:not(:disabled).is-active,
      &:not(:disabled).is-loading {
        background-color: var(--el-translucent-inverse-active);
      }

      @include when(focus) {
        // @fixme: define correct color
        @import './common/variables/colors-sass'; /* stylelint-disable-line no-duplicate-at-import-rules */

        box-shadow: 0 0 0 $av-border-width-md invert($av-fixed-focus);
      }
    }
  }

  @include m(ghost) {
    @include button-variant(
      $color: $av-fixed-link,
      $background-color: transparent,
      $border-color: transparent,
      $hover-background: var(--el-secondary-hover),
      $active-background: var(--el-secondary-active),
      $focus-background: $av-fixed-focus,
      $disabled-background: transparent,
      $disabled-color: $av-fixed-button-light
    );
    @include btn-secondary-borderless-action-state();

    border: none;

    &.el-button--contains-icon {
      min-width: 32px;
      min-height: 32px;
      padding: 0;
    }

    &.el-button--icon-only {
      color: var(--av-fixed-button);
    }
  }

  @include m(right-icon) {
    margin-right: 0;
  }

  // TODO remove deprecated button type
  @include m(text) {
    color: var(--av-fixed-button);
    padding: 0;
    border: none;
    background-color: transparent;
    outline: none;

    @include when(focus) {
      background-color: var(--av-fixed-focus);
      box-shadow:
        -8px 0 var(--av-fixed-focus),
        8px 0 var(--av-fixed-focus);
    }
  }

  @include m(icon) {
    font-weight: $av-font-weight-normal;
    color: var(--av-fixed-button);
    min-width: 32px;
    min-height: 32px;
    padding: 0;
    border: none;
    background-color: transparent;
    outline: none;

    &:hover,
    &.is-selected {
      color: var(---el-primary-hover);
    }

    &.is-active,
    &:active {
      color: var(--el-primary-active);
    }

    @include when(focus) {
      background-color: var(--av-fixed-focus);
    }
  }

  @include m(small) {
    height: 24px;
    padding: 0 7px;
  }

  @include m(large) {
    height: 48px;
    padding: 0 15px;
  }

  @each $size in(32, 48) {
    @include m(height-#{$size}) {
      height: #{$size}px;
    }
  }

  @include m(has-icon) {
    &:not(.el-button--text) {
      padding-left: 8px;
    }
  }

  @include m(icon-only) {
    .el-button__icon {
      margin-right: 0;
    }

    &.el-button--ghost,
    &.el-button--text {
      .el-button__icon {
        margin-right: 0;
        margin-left: 0;
      }
    }

    .el-button__text {
      display: flex;

      & .i {
        margin: auto;
      }
    }
  }

  @include when(disabled) {
    pointer-events: none;
    cursor: default;
  }

  @include when(loading) {
    cursor: default;

    .el-button__content {
      visibility: hidden;
    }

    .el-spinner {
      position: absolute;
      left: calc(50% - 8px);
      top: calc(50% - 8px);
    }
  }

  @include when(fluid) {
    width: 100%;
  }

  @include when(multiline) {
    min-height: 32px;
    height: auto;
    line-height: 20px;
    padding-top: 5px;
    padding-bottom: 5px;

    .el-button__text {
      white-space: normal;
    }
  }

  @include when(inverse) {
    filter: invert(100%);
  }

  &::-moz-focus-inner {
    border: none;
  }

  &:-moz-focusring {
    outline: none;
  }

  + .el-button:not(.is-fluid) {
    margin-left: 16px;

    &.el-button--ghost {
      margin-left: 8px;
    }
  }
}
