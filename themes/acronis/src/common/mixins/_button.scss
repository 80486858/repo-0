/**
 * Checks is `$color` a definition of CSS-variable or not
 *
 * @example
 * is-css-variable(var(--el-primary)) => true
 * is-css-variable("var(--el-primary)") => true
 * is-css-variable(#000) => false
 * is-css-variable(rgb(0, 0, 0)) => false
 *
 * @param $color [Sass::Script::Value::Base]
 * @return [Sass::Script::Value::Bool]
 */
@function is-css-variable($color) {
  @return str-index(inspect($color), 'var(--') == 1;
}

/**
 * Adds modifier to CSS-variable
 *
 * @example
 * apply-modifier-to-css-variable(var(--el-primary), "") => "var(--el-primary)"
 * apply-modifier-to-css-variable(var(--el-primary), "hover") => "var(--el-primary-hover)"
 * apply-modifier-to-css-variable("var(--el-primary)", "hover") => "var(--el-primary-hover)"
 *
 * @param $var [Sass::Script::Value::Base]
 * @param $modifier [Sass::Script::Value::String]
 * @return [Sass::Script::Value::String]
 */
@function apply-modifier-to-css-variable($var, $modifier) {
  @if str-length($modifier) == 0 {
    @return $var;
  }

  @return str-insert(inspect($var), '-' + $modifier, -2);
}

@mixin button-variant(
  $color,
  $background-color,
  $border-color: $background-color,
  $hover-background: darken($background-color, 7%),
  $active-background: darken($background-color, 12%),
  $focus-background: $background-color,
  $disabled-background: $background-color,
  $disabled-border: $background-color,
  $disabled-color: var(--av-fixed-button-light),
) {
  color: $color;
  border-color: $border-color;
  background-color: $background-color;
  outline: none;

  &:not(:disabled) {
    &:hover,
    &.is-hover {
      color: $color;

      @if $hover-background {
        border: $av-border-sm $border-color;
        background: $hover-background;
      } @else {
        border: $av-border-sm $av-brand-primary-hover;
        background: $av-brand-primary-hover;
      }
    }

    &:active,
    &.is-active,
    &.is-loading,
    &.is-selected {
      color: $color;

      @if $active-background {
        border: $av-border-sm $active-background;
        background: $active-background;
      } @else {
        @if is-css-variable($background-color) {
          border-color: apply-modifier-to-css-variable($background-color, 'active');
          background: apply-modifier-to-css-variable($background-color, 'active');
        } @else if type-of($background-color) == color {
          border-color: darken($background-color, 12%);
          background: darken($background-color, 12%);
        } @else {
          border-color: $av-brand-primary-active;
          background: $av-brand-primary-active;
        }
      }
    }

    &:focus,
    &:focus-within,
    &:focus-visible,
    &.is-focus {
      background-color: $focus-background;
      box-shadow: 0 0 0 $av-border-width-md $av-fixed-focus;
    }
  }

  &:disabled,
  &.is-disabled {
    background-color: $disabled-background;
    color: $disabled-color;
    border-color: $disabled-border;
    pointer-events: none;
    cursor: default;
  }
}

@mixin button-style() {
  color: $av-fixed-primary;
  box-sizing: border-box;
  display: inline-block;
  min-width: 0;
  height: 48px;
  border: $av-border-sm $av-brand-light;
  outline: none;
  background-color: $av-fixed-white;
  background-clip: content-box;
  cursor: pointer;
  user-select: none;

  .i {
    display: block;
  }

  @include e(content) {
    display: flex;
    align-items: center;
    height: 100%;
    padding: 0 16px;
  }

  @include e(original) {
    width: 100%;
    height: 100%;
    left: 0;
    cursor: pointer;
    outline: none;
    position: absolute;
    opacity: 0;
  }

  @include m(small) {
    height: 32px;
  }

  @include when(checked) {
    border-color: var(--av-brand-primary);
    background-color: var(--av-brand-accent);

    + .el-radio-button,
    + .el-checkbox-button {
      border-left-color: var(--av-brand-primary);
    }
  }

  @include when(disabled) {
    color: $av-fixed-lighter;
    background-color: transparent;
    cursor: default;

    .i::before {
      color: $av-brand-light;
    }
  }

  &.is-checked.is-disabled {
    // todo: to fix after update mockups
  }
}

@mixin button-group() {
  display: inline-block;
  vertical-align: middle;
  max-width: 100%;

  @include e(content) {
    display: flex;
  }

  @include when(invalid) {
    position: relative;
    display: flex;
    padding: 0 8px;

    &::after {
      content: '';
      display: block;
      border: $av-border-width-sm solid $av-fixed-danger;
      border-radius: $av-border-radius-2;
      position: absolute;
      top: 0;
      bottom: 0;
      left: 0;
      right: 0;
      pointer-events: none;
    }
  }

  @content;
}

@mixin button-group-item($name) {
  $border-radius: $av-border-radius-2 + $av-border-width-md;

  @include b($name) {
    position: relative;
    border-right-width: 0;

    &:focus:not(.is-disabled) {
      .el-#{$name}__content::before {
        content: '';
        border-color: $av-fixed-focus;
        border-width: $av-border-width-md 0;
        border-style: $av-border-style-solid;
        position: absolute;
        right: 0;
        left: 0;
        top: -4px;
        bottom: -4px;
        box-sizing: content-box;
      }
    }

    &:first-child {
      border-radius: $av-border-radius-2 0 0 $av-border-radius-2;

      &:focus {
        .el-#{$name}__content::before {
          border-width: $av-border-width-md 0 $av-border-width-md $av-border-width-md;
          left: -4px;
          border-radius: $border-radius 0 0 $border-radius;
        }
      }
    }

    &:last-child {
      border-radius: 0 $av-border-radius-2 $av-border-radius-2 0;
      border-right-width: $av-border-width-sm;

      &:focus {
        .el-#{$name}__content::before {
          border-width: $av-border-width-md $av-border-width-md $av-border-width-md 0;
          right: -4px;
          border-radius: 0 $border-radius $border-radius 0;
        }
      }
    }

    &:active:focus {
      .el-#{$name}__content::before {
        border: 0;
      }
    }
  }
}
