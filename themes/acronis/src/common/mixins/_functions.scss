@function selector-to-string($selector) {
  $selector: inspect($selector);
  $selector: str-slice($selector, 2, -2);

  @return $selector;
}

@function containsModifier($selector) {
  $selector: selector-to-string($selector);

  @if str-index($selector, $modifier-separator) {
    @return true;
  } @else {
    @return false;
  }
}

@function containWhenFlag($selector) {
  $selector: selector-to-string($selector);

  @if str-index($selector, '.' + $state-prefix) {
    @return true;
  } @else {
    @return false;
  }
}

@function containPseudoClass($selector) {
  $selector: selector-to-string($selector);

  @if str-index($selector, ':') {
    @return true;
  } @else {
    @return false;
  }
}

@function hitAllSpecialNestRule($selector) {
  @return containsModifier($selector) or containWhenFlag($selector) or containPseudoClass($selector);
}

@function str-split($string, $separator) {
  // empty array/list
  $split-arr: ();
  // first index of separator in string
  $index : str-index($string, $separator);
  // loop through string
  @while $index != null {
    // get the substring from the first character to the separator
    $item: str-slice($string, 1, $index - 1);
    // push item to array
    $split-arr: append($split-arr, $item);
    // remove item and separator from string
    $string: str-slice($string, $index + 1);
    // find new index of separator
    $index : str-index($string, $separator);
  }
  // add the remaining string to list (the last item)
  $split-arr: append($split-arr, $string);

  @return $split-arr;
}

@function get($map, $paths...) {
  $allParts: ();

  @each $path in $paths {
    $pathParts: str-split($path, '.');

    @each $pathPart in $pathParts {
      $allParts: append($allParts, $pathPart);
    }
  }

  @each $key in $allParts {
    $map: map-get($map, $key);
  }

  @return $map;
}

@function custom-lighten($color-variable, $value) {
  $color-variable-h: var(#{$color-variable + '-h'});
  $color-variable-s: var(#{$color-variable + '-s'});
  $color-variable-l: calc(var(#{$color-variable + '-l'}) - #{$value+'%'});

  @return hsl($color-variable-h, $color-variable-s, $color-variable-l);
}

@function custom-saturation($color-variable, $value) {
  $color-variable-h: var(#{$color-variable + '-h'});
  $color-variable-s: calc(var(#{$color-variable + '-s'}) - #{$value+'%'});
  $color-variable-l: var(#{$color-variable + '-l'});

  @return hsl($color-variable-h, $color-variable-s, $color-variable-l);
}

@function opposite-color($color-variable) {
  $color-variable-h: var(#{$color-variable + '-h-opposite'});
  $color-variable-s: var(#{$color-variable + '-s'});
  $color-variable-l: var(#{$color-variable + '-l'});

  @return hsl($color-variable-h, $color-variable-s, $color-variable-l);
}
